#!/usr/bin/env python3
"""
pomodoro - A simple CLI Pomodoro timer

Usage:
    pomodoro <task_name> <minutes>

Example:
    pomodoro 25 write documentation
    pomodoro 5 take a break

Version: 1.0.0
Author: Jerry Yang
"""

import sys
import time
import os
import argparse
import signal

WIDTH = 50

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="A simple Pomodoro timer")
    parser.add_argument("minutes", type=int, help="Duration in minutes")
    parser.add_argument("task", nargs="+", help="Name of the task (can be multiple words)")
    parser.add_argument("--version", action="version", version="pomodoro 1.0.0")
    return parser.parse_args()

def get_terminal_width() -> int:
    term_width = os.get_terminal_size().columns
    return term_width

def display_progress_bar(elapsed, total, task, width=WIDTH):
    """Display a progress bar showing elapsed time."""
    percent = elapsed / total
    filled_width = int(width * percent)
    bar = "█" * filled_width + "░" * (width - filled_width)
    
    mins, secs = divmod(int(total - elapsed), 60)
    time_left = f"{mins:02d}:{secs:02d}"
    
    # Calculate the number of characters in the terminal
    term_width = get_terminal_width()
    
    print(f"\r[{bar}] {time_left} remaining", end="", flush=True)

def play_sound() -> None:
    # Play a sound if available
    if sys.platform == "darwin":  # macOS
        os.system("afplay /System/Library/Sounds/Glass.aiff")
    elif sys.platform.startswith("linux"):
        os.system("paplay /usr/share/sounds/freedesktop/stereo/complete.oga 2>/dev/null || spd-say 'Pomodoro complete'")
        

def run_timer(task, minutes):
    """Run the Pomodoro timer with progress bar."""
    total_seconds = minutes * 60
    start_time = time.time()
    
    def handle_interrupt(sig, frame):
        print("\nTimer interrupted!")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, handle_interrupt)
    
    try:
        while True:
            elapsed = time.time() - start_time
            if elapsed >= total_seconds:
                break
                
            display_progress_bar(elapsed, total_seconds, task)
            time.sleep(0.05)  # Update frequently for smooth progress
            
        # Timer complete
        print(f"\r[{'█' * WIDTH}] {minutes:00} Completed!{' ' * 15}")
        play_sound()

    except KeyboardInterrupt:
        print("\nTimer interrupted!")
        sys.exit(0)

def clear_screen():
    """Clear the screen."""
    os.system("cls" if os.name == "nt" else "clear")
    if sys.platform in ('linux', 'darwin'):
        CLEAR = 'clear'
    elif sys.platform == 'win32':
        CLEAR = 'cls'
    else:
        print('Platform not supported', file=sys.stderr)
        exit(1)

    os.system(CLEAR)


def main():
    """Main function."""
    args = parse_arguments()
    
    if args.minutes <= 0:
        print("Error: Minutes must be a positive number")
        sys.exit(1)
    
    clear_screen()
    print(f"{" ".join(args.task).capitalize()}")

    time.sleep(0.2)  # Give user a moment to read the message
    
    run_timer(args.task, args.minutes)


if __name__ == "__main__":
    main()
